{
	"data": [{
			"title": "Open Payment API",
			"date": "Aug 18, 2020",
			"description": "【ウェブペイメント】第1回 PayPay Integration Webinar",
			"Youtube_Link": "https://youtu.be/Zh6BYvHyDGs",
			"webinar_txt": "WEBINAR",
			"webinar_videos_txt": "Videos",
			"youtube_link_txt": "Youtube Link",
			"summary_txt": "Summary",
			"sub_title": [{
					"title": "Introducing PayPay Online Payment - Web Payment -",
					"description_1": "This video introduces PayPay's Web Payment of online payments.",
					"description_1_1": "",
					"description_2": ""
				},
				{
					"title": "What is Web Payment",
					"description_1": "Web payment is one of the online payment patterns provided by PayPay.",
					"description_1_1": "",
					"description_2": "The payment is completed by the user on the payment page created by the API."
				}
			],
			"code_snippet": [{
					"title": "Installation",
					"code": [{
						"python": "# If you love Python, you will love our pip installation package, \n  # simply run the following to ensure you have all the methods needed to make the integration\n  $ pip install paypayopa",
						"php": "##  Minimum required software requirements\n  #  To use the Paypay OPA PHP SDK you need:\n\n  #  A server compute environment (local machines, docker containers, VPS or dedicated servers, cloud infrastructure etc. )\n  #  A web server to serve your API responses and html documents.\n  #  PHP version 7.x interpreter to execute your backend code.\n  #  Composer to manage your dependencies(recommended) or a release version from this repo to manually maintain your dependencies.\n  \n  #To install the bindings via Composer, add the following to composer.json:\n    composer require paypayopa/php-sdk",
						"node": "// To install the client library using npm, execute the following\n  npm i @paypayopa/paypayopa-sdk-node\n  // To install the client library using yarn, execute the following\n  yarn add @paypayopa/paypayopa-sdk-node",
						"java": "<!-- To install the API client library to your local Maven repository, simply execute: -->\n  gradle install\n  <!-- Maven: Add this dependency to your project's POM: -->\n  <dependency>\n    <groupId>jp.ne.paypay</groupId>\n    <artifactId>paypayopa</artifactId>\n    <version>0.8.0</version>\n    <scope>compile</scope>\n  </dependency>\n  <!-- Gradle: Add this dependency to your project's build file: -->\n  compile \"jp.ne.paypay:paypayopa:0.8.0\""
					}]
				}, {
					"title": "Create Payment",
					"code": [{
						"python": "# If you love Python, you will love our pip installation package, \n  # simply run the following to ensure you have all the methods needed to make the integration\n  $ pip install paypayopa",
						"php": "",
						"node": "",
						"java": "ApiClient apiClient = new Configuration().getDefaultApiClient();\n  //Set True for Production Environment. By Default this is set False for Sandbox Environment.\n  apiClient.setProductionMode(false); \n  apiClient.setApiKey(\"YOUR_API_KEY\");\n  apiClient.setApiSecretKey(\"YOUR_API_SECRET\");\n  apiClient.setAssumeMerchant(\"YOUR_MERCHANT_KEY\");"
					}]
				},
				{
					"title": "Refund",
					"code": [{
						"python": "# Creating the payload to refund a Payment, additional parameters can be added basis the API Documentation\nrequest = {\n    merchantRefundId = \"merchant_refund_id\",\n    paymentId = \"paypay_payment_id\",\n    amount = 1,\n    reason = \"reason for refund\"\n}\n# Calling the method to refund a Payment\nresponse = client.Payment.refund_payment(request)\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				}
			],
			"Integration_title": "Topic",
			"Integration": [{
				"title": "What is PayPay?",
				"description": ""
			}, {
				"title": "What is PayPay's online payment system?",
				"description": ""
			}, {
				"title": "What is Web Payment?",
				"description": ""
			}, {
				"title": "What is PayPay for Developers?",
				"description": ""
			}, {
				"title": "Explanation of development procedures",
				"description": ""
			}, {
				"title": "Q&A",
				"description": ""
			}]
		},
		{
			"title": "Open Payment API",
			"date": "Sep 15, 2020",
			"description": "【ネイティブペイメント】第2回 PayPay Integration Webinar",
			"Youtube_Link": "https://youtu.be/4H8vqj0Nn2Q",
			"webinar_txt": "WEBINAR",
			"webinar_videos_txt": "Videos",
			"youtube_link_txt": "Youtube Link",
			"summary_txt": "Summary",
			"sub_title": [{
					"title": "Introducing PayPay Online Payments - Native Payment - ",
					"description_1": "This video introduces PayPay's Native Payment of online payments.",
					"description_1_1": "",
					"description_2": ""
				},
				{
					"title": "What is Native Payment",
					"description_1": "Native Payment is one of the online payment patterns provided by PayPay.",
					"description_1_1": "",
					"description_2": "The first step is to link the merchant service to the user's PayPay account.",
					"description_3": "Using the user identifier returned by PayPay at the time of account linkage, the merchant service can debit the user's wallet directly from the merchant service to complete the payment."
				}
			],
			"code_snippet": [{
					"title": "Create Payment",
					"code": [{
						"python": "# If you love Python, you will love our pip installation package, \n  # simply run the following to ensure you have all the methods needed to make the integration\n  $ pip install paypayopa",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Refund",
					"code": [{
						"python": "# Creating the payload to refund a Payment, additional parameters can be added basis the API Documentation\n\npayload = {\n    \"assumeMerchant\": \"assume_merchant\",\n    \"merchantRefundId\": \"merchant_refund_id\",\n    \"paymentId\": \"paypay_payment_id\",\n    \"amount\": {\n        \"amount\": 1,\n        \"currency\": \"JPY\"\n    },\n    \"reason\": \"reason for refund\"\n}\n\n# Calling the method to refund a Payment\nresponse = client.Pending.refund_payment(payload)\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				}
			],
			"Integration_title": "Topic",
			"Integration": [{
				"title": "What is PayPay?",
				"description": ""
			}, {
				"title": "What is PayPay's online payment system?",
				"description": ""
			}, {
				"title": "What is Native Payment?",
				"description": ""
			}, {
				"title": "What is PayPay for Developers?",
				"description": ""
			}, {
				"title": "Explanation of development procedures",
				"description": ""
			}, {
				"title": "Q&A",
				"description": ""
			}]
		}

	]

}

{
	"data": [{
			"title": "Open Payment API",
			"date": "Aug 18, 2020",
			"description": "【ウェブペイメント】第1回 PayPay Integration Webinar",
			"Youtube_Link": "https://youtu.be/Zh6BYvHyDGs",
			"webinar_txt": "WEBINAR",
			"webinar_videos_txt": "Videos",
			"youtube_link_txt": "Youtube Link",
			"summary_txt": "Summary",
			"sub_title": [{
					"title": "Introducing PayPay Online Payment - Web Payment -",
					"description_1": "This video introduces PayPay's Web Payment of online payments.",
					"description_1_1": "",
					"description_2": ""
				},
				{
					"title": "What is Web Payment",
					"description_1": "Web payment is one of the online payment patterns provided by PayPay.",
					"description_1_1": "",
					"description_2": "The payment is completed by the user on the payment page created by the API."
				}
			],
			"code_snippet": [{
					"title": "Create Client",
					"code": [{
						"python": "",
						"php": "",
						"node": "",
						"java": "private static ApiClient createApiClient() { \n ApiClient apiClient = new Configuration().getDefaultApiClient(); \n  apiClient.setProductionMode( \n false); // Set True for Production Environment. By Default this is set False for Sandbox \n // Environment. \n apiClient.setApiKey("API_KEY"); \n apiClient.setApiSecretKey("API_SECRET"); \n return apiClient; \n }"
					}]
				}, {
					"title": "Build your Client",
					"code": [{
						"python": "import paypayopa\n  #Set True for Production Environment. By Default this is set False for Sandbox Environment.\n  client = paypayopa.Client(auth=(API_KEY, API_SECRET), production_mode=False)\n  client.set_assume_merchant(\"MERCHANT_ID\")",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Create a QR Code",
					"code": [{
						"python": "# Creating the payload to create a QR Code, additional parameters can be added basis the API Documentation\n  request = {\n    \"merchantPaymentId\": \"merchant_payment_id\",\n    \"codeType\": \"ORDER_QR\",\n    \"redirectUrl\": \"http://foobar.com\",\n    \redirectType\":\"WEB_LINK\",\n    \"orderDescription\":\"Example - Mune Cake shop\",\n    \"orderItems\": [{\n        \"name\": \"Moon cake\",\n        \"category\": \"pasteries\",\n        \"quantity\": 1,\n        \"productId\": \"67678\",\n        \"unitPrice\": {\n            \"amount\": 1,\n            \"currency\": \"JPY\"\n        }\n    }],\n    \"amount\": {\n        \"amount\": 1,\n        \"currency\": \"JPY\"\n    },\n}\n# Calling the method to create a qr code\nresponse = client.Code.create_qr_code(request)\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Delete a QR Code",
					"code": [{
						"python": "# Calling the method to delete a QR Code\nresponse = client.Code.delete_qr_code(\"<CodeID>\")\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Get Payment Details",
					"code": [{
						"python": "# Calling the method to get payment details\nresponse = client.Payment.get_payment_details(\"<merchantPaymentId>\")\n# Printing if the method call was SUCCESS, this does not mean the payment was a success\nprint(response.resultInfo.code)\n# Printing if the transaction status for the code has COMPLETED/ AUTHORIZED\nprint(response.data.status)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Cancel a payment",
					"code": [{
						"python": "# Calling the method to cancel a Payment\nresponse = client.Payment.cancel_payment(\"<merchantPaymentId>\")\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Refund payment",
					"code": [{
						"python": "# Creating the payload to refund a Payment, additional parameters can be added basis the API Documentation\nrequest = {\n    merchantRefundId = \"merchant_refund_id\",\n    paymentId = \"paypay_payment_id\",\n    amount = 1,\n    reason = \"reason for refund\"\n}\n# Calling the method to refund a Payment\nresponse = client.Payment.refund_payment(request)\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Fetch refund status and details",
					"code": [{
						"python": "# Calling the method to get Refund Details\nresponse = client.Payment.refund_status(\"<merchantRefundId>\")\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				}
			],
			"Integration_title": "Topics",
			"Integration": [{
				"title": "What is PayPay?",
				"description": ""
			}, {
				"title": "What is PayPay's online payment system?",
				"description": ""
			}, {
				"title": "What is Web Payment?",
				"description": ""
			}, {
				"title": "What is PayPay for Developers?",
				"description": ""
			}, {
				"title": "Explanation of development procedures",
				"description": ""
			}, {
				"title": "Q&A",
				"description": ""
			}]
		},
		{
			"title": "Open Payment API",
			"date": "Sep 15, 2020",
			"description": "【ネイティブペイメント】第2回 PayPay Integration Webinar",
			"Youtube_Link": "https://youtu.be/4H8vqj0Nn2Q",
			"webinar_txt": "WEBINAR",
			"webinar_videos_txt": "Videos",
			"youtube_link_txt": "Youtube Link",
			"summary_txt": "Summary",
			"sub_title": [{
					"title": "Introducing PayPay Online Payments - Native Payment - ",
					"description_1": "This video introduces PayPay's Native Payment of online payments.",
					"description_1_1": "",
					"description_2": ""
				},
				{
					"title": "What is Native Payment",
					"description_1": "Native Payment is one of the online payment patterns provided by PayPay.",
					"description_1_1": "",
					"description_2": "The first step is to link the merchant service to the user's PayPay account.",
					"description_3": "Using the user identifier returned by PayPay at the time of account linkage, the merchant service can debit the user's wallet directly from the merchant service to complete the payment."
				}
			],
			"code_snippet": [{
					"title": "Installation",
					"code": [{
						"python": "# If you love Python, you will love our pip installation package, \n  # simply run the following to ensure you have all the methods needed to make the integration\n  $ pip install paypayopa",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Build your Client",
					"code": [{
						"python": "import paypayopa\n  #Set True for Production Environment. By Default this is set False for Sandbox Environment.\n  client = paypayopa.Client(auth=(API_KEY, API_SECRET), production_mode=False)\n  client.set_assume_merchant(\"MERCHANT_ID\")",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Acquire User Authorization",
					"code": [{
						"python": "payload = {\n  \"scopes\": [\n    \"direct_debit\"\n  ],\n  \"nonce\": \"rtyuhghj7989\",\n  \"redirectType\": \"WEB_LINK\",\n  \"redirectUrl\": \"merchant.domain\",\n  \"referenceId\": \"uioiugf789\",\n  \"phoneNumber\": \"90999999999\",\n  \"deviceId\": \"qwertyuiopoiuytre54567\",\n  \"userAgent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\"\n}\nclient.Account.create_qr_session(payload)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Create a Payment",
					"code": [{
						"python": "# Creating the payload to create a Payment, additional parameters can be added basis the API Documentation\nrequest = {\n    merchantPaymentId = \"my_payment_id\",\n    userAuthorizationId = \"my_user_authorization_id\",\n    amount = {\n      amount = 1, \n      currency = \"JPY\"\n    },\n    orderDescription = \"Mune's Favourite Cake\"\n}\n# Calling the method to create a payment\nresponse = client.Payment.create(request)\n# Printing if the method call was SUCCESS, this does not mean the payment was a success\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Get Payment Details",
					"code": [{
						"python": "# Calling the method to get payment details\nresponse = client.Payment.get_payment_details(\"<merchantPaymentId>\")\n# Printing if the method call was SUCCESS, this does not mean the payment was a success\nprint(response.resultInfo.code)\n# Printing if the transaction status for the code has COMPLETED/ AUTHORIZED\nprint(response.data.status)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Refund payment",
					"code": [{
						"python": "# Creating the payload to refund a Payment, additional parameters can be added basis the API Documentation\nrequest = {\n    merchantRefundId = \"merchant_refund_id\",\n    paymentId = \"paypay_payment_id\",\n    amount = 1,\n    reason = \"reason for refund\"\n}\n# Calling the method to refund a Payment\nresponse = client.Payment.refund_payment(request)\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				},
				{
					"title": "Fetch refund status and details",
					"code": [{
						"python": "# Calling the method to get Refund Details\nresponse = client.Payment.refund_status(\"<merchantRefundId>\")\n# Printing if the method call was SUCCESS\nprint(response.resultInfo.code)",
						"php": "",
						"node": "",
						"java": ""
					}]
				}
			],
			"Integration_title": "Topics",
			"Integration": [{
				"title": "What is PayPay?",
				"description": ""
			}, {
				"title": "What is PayPay's online payment system?",
				"description": ""
			}, {
				"title": "What is Native Payment?",
				"description": ""
			}, {
				"title": "What is PayPay for Developers?",
				"description": ""
			}, {
				"title": "Explanation of development procedures",
				"description": ""
			}, {
				"title": "Q&A",
				"description": ""
			}]
		}

	]

}
